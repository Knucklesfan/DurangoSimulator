<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fightline</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.attack_spawn_count += 1;
spawn_id = global.attack_spawn_count;

strike = false;
loop_attack = false;
draw_atk_number = false;
step_finish_attack = 0;

if (global.dir_x == 1)
{
    x = 100;
    y = obj_omni.y + 319;
}
if (global.dir_x == 2)
{
    x = 540;
    y = obj_omni.y + 319;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step
y = obj_omni.y + 319;

if (strike == false)
{
    if !(global.dir_x == 0)
    {
        if (spawn_id = global.attack_count + 1) image_index = 0;
        else image_index = 1;
    }
    if (global.dir_x == 1)
    {
        x += global.attack_speed;
        if (global.attack_spawn &gt; 1)
        {
            if (x &gt;= 360)
            {
                image_alpha -= 0.1;
                global.attack_count = global.attack_spawn;
                global.attack_spawn_count = global.attack_spawn;
                global.fade = true;
            }
        }
        else if (x &gt;= 540)
        {
            image_alpha -= 0.1;
            global.attack_count = global.attack_spawn;
            global.attack_spawn_count = global.attack_spawn;
            global.fade = true;
            
            global.missed = true;
        }
    }
    if (global.dir_x == 2)
    {
        x -= global.attack_speed;
        if (global.attack_spawn &gt; 1)
        {
            if (x &lt;= 280)
            {
                image_alpha -= 0.1;
                global.attack_count = global.attack_spawn;
                global.attack_spawn_count = global.attack_spawn;
                global.fade = true;
            }
        }
        else if (x &lt;= 100)
        {
            image_alpha -= 0.1;
            global.attack_count = global.attack_spawn;
            global.attack_spawn_count = global.attack_spawn;
            global.fade = true;
            
            global.missed = true;
        }
    }
}

if (image_alpha == 1)&amp;&amp;(global.fade == false)
if (keyboard_check_pressed(ord('Z')))||(keyboard_check_pressed(vk_enter))
{
    if (SOUL_dt.weapon == "Empty Gun")
    ||(SOUL_dt.weapon == "Edax Animae")
    {
        if (x &gt; 320)
        global.attack_damage += round(SOUL_dt.ATK * SOUL_dt.weapon_ATK * (1 / (x - 320)));
        else if (x &lt; 320)
        global.attack_damage += round(SOUL_dt.ATK * SOUL_dt.weapon_ATK * (1 / (320 - x)));
        else global.attack_damage += round(SOUL_dt.ATK * SOUL_dt.weapon_ATK);
    }
    else
    {
        if (x &gt; 320)
        global.attack_damage += round(SOUL_dt.ATK * SOUL_dt.weapon_ATK * (1 - ((x - 320) / 320)) / global.attack_spawn);
        else if (x &lt; 320)
        global.attack_damage += round(SOUL_dt.ATK * SOUL_dt.weapon_ATK * (1 - ((320 - x) / 320)) / global.attack_spawn);
        else global.attack_damage += round(SOUL_dt.ATK * SOUL_dt.weapon_ATK / global.attack_spawn);
    }
    if (global.attack_count &lt;= global.attack_spawn - 1)
    {
        audio_play_sound(snd_attackcombo, 0, false);
        if (x == 320)
        {
            audio_sound_pitch(snd_attackcombo, 0.9);
            sprite_index = spr_strike_perfect;
        }
        else if !(x == 320)&amp;&amp;(x &gt; 280)&amp;&amp;(x &lt; 360)
        {
            audio_sound_pitch(snd_attackcombo, 1);
            sprite_index = spr_strike;
        }
        else
        {
            audio_stop_sound(snd_attackcombo);
            sprite_index = spr_strike_bad;
        }
        strike = true;
        global.attack_count += 1;
    }
    if (global.attack_count == global.attack_spawn)
    {
        if (global.attack_spawn &gt; 1)
        {
            strike = true;
            global.fade = true;
        }
        else if (global.attack_spawn == 1)
        {
            audio_play_sound(snd_attackslash, 0, false);
            instance_create(x, y, obj_strike);
            instance_destroy();
        }
    }
    dir_x = 0;
    io_clear();
}

if (strike == true)
{
    image_speed = 0.2;
    image_alpha -= 0.05;
    image_xscale += 0.05;
    image_yscale += 0.05;
    if (x == 320)&amp;&amp;(image_alpha == 0.65)
    audio_play_sound(snd_attackcombo, 0, false);
}

if (global.fade == true)
{
    if (strike == false) image_alpha -= 0.05;
}

if (image_alpha &lt;= 0)
{
    if (global.fade == true)&amp;&amp;(instance_number(obj_fightline) == 1)
    {
        if !(instance_exists(obj_damage)) instance_create(x, y, obj_damage);
        if (global.attack_spawn == 1) obj_fightbar.fade = true;
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//draw_text(x, 200, x);

/*
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text(320, 200, string(global.attack_damage));
draw_set_valign(fa_top);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
