<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CREATE EVENT
//init
stars_total = 600;            //total stars to spawn
star_spd = 0;                //star speed - set via mouse_x movement
star_length = 0;            //star streak length - set via mouse_y movement
star_length_factor = 5;        //factor for mouse v length
star_start_width = 0.5;        //star start width
star_end_width = 6;            //star end width
respawn_zfactor = 2;        //make z respawn further back
respawn_xyfactor = .75;        //make width/height respawn not as wide

//store stars in ds_grid
ds_star = ds_grid_create(4, stars_total);

//setup star array
for (var i = 0; i &lt; ds_grid_height(ds_star); i++) {
    //randomise stars
    ds_star[# 0, i] = random_range(-room_width * respawn_xyfactor, room_width * respawn_xyfactor);        //x
    ds_star[# 1, i] = random_range(-room_height * respawn_xyfactor, room_height * respawn_xyfactor);    //y
    ds_star[# 2, i] = random_range(0, room_width * respawn_zfactor);                                    //z
    ds_star[# 3, i] = ds_star[# 2, i];                                                                    //pz - previous z
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DRAW EVENT
//init
var w = room_width;
var h = room_height;

//map mouse movements
star_spd = 7.5;
star_length = 5;

//cycle through each star and move coords
for (var i = 0; i &lt; ds_grid_height(ds_star); i++) {
    //store as temp for easy use
    var xx = ds_star[# 0, i];
    var yy = ds_star[# 1, i];
    var zz = ds_star[# 2, i];
    var pz = ds_star[# 2, i] + (star_length_factor * star_length);

    //update
    zz -= star_spd;
    if zz &lt; 1 {
        //push z far back if it reaches screen edge
        zz = w * respawn_zfactor;
        //assign new x and y
        ds_star[# 0, i] = random_range(-w * respawn_xyfactor, w * respawn_xyfactor);        //x
        ds_star[# 1, i] = random_range(-h ,h);        //y
        //reassign xx and yy and pz
        xx = ds_star[# 0, i];
        yy = ds_star[# 1, i];
        pz = zz;
    }
 
    //show
    //map the value xx/zz, which is a value between 0 and 1, to a value between 0 and room_width and add 1/2 width to center
    var sx = map(xx / zz, 0, 1, 0, w) + w/2;
    //map the value yy/zz, which is a value between 0 and 1, to a value between 0 and room_height and add 1/2 height to center
    var sy = map(yy / zz, 0, 1, 0, h) + h/2;
 
    //change scale
    //set width
    var width = map(zz, 0, w * respawn_zfactor, star_end_width, star_start_width);
    //set fade in
    var alpha = map(zz, 0, w * respawn_zfactor, 1, 0);
    //map the value zz, which is a value between 0 and w, to a value between 4 and 0 to replicate star radius vs distance
    var r = map(zz, 0, w * respawn_zfactor, 6, 0);
    //draw stars
    draw_set_color(c_yellow);
    draw_circle(sx, sy, r, false);
    draw_set_color(c_white);
    //draw lines
    //map the value xx/pz, which is a value between 0 and 1, to a value between 0 and room_width and add 1/2 width to center
    var px = map(xx / pz, 0, 1, 0, w) + w/2;
    //map the value yy/pz, which is a value between 0 and 1, to a value between 0 and room_height and add 1/2 height to center
    var py = map(yy / pz, 0, 1, 0, h) + h/2;
 
    draw_set_alpha(alpha);
    draw_line_width_color(px, py, sx, sy, width, c_aqua, c_white);
    draw_set_alpha(1);
 
    //store z value back
    ds_star[# 2, i] = zz;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
