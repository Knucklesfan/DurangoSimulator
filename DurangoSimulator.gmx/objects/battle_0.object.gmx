<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Important variables
global.reset_info = false;
global.option_advanced_choose_last = 0;

global.event_battle_yourturn = true;
global.event_battle_interact = false;
global.event_battle_enemydialogue = false;
global.event_battle_getdialogue = true;
global.event_battle_enddialogue = false;
global.event_battle_boxready = true;
global.event_battle_enemyturn = false;

global.enemy_count = 1;
global.enemy_alive = 0;
global.enemy_1_position_x = 320;
global.enemy_1_position_y = 125;

global.enemy_1 = monster_placeholder;

global.enemy_1_spareable = false;
global.enemy_2_spareable = false;
global.enemy_3_spareable = false;
global.enemy_1_spared = false;
global.enemy_2_spared = true;
global.enemy_3_spared = true;

global.attack_type_random_count = 2;
global.attack_by_random = true;
global.attack_type[1] = atk_normal;
global.attack_type[2] = atk_heal;
global.attack_type[3] = atk_stop;
global.attack_type[4] = atk_move;
global.attack_type[5] = atk_xtr;

global.option_battle = 1;
global.option_FIGHT = 0;
global.option_ACT = 0;
global.option_ITEM = 0;
global.option_MERCY = 0;
global.option_advanced = 0;

with (instance_create(global.enemy_1_position_x, global.enemy_1_position_y, global.enemy_1))
{
    global.enemy_1 = id;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On-screen info
ui_target_enemy = "
  * " + string(global.enemy_1.name)

ui_ACT_row_1 = "
  * Check#
  * Orange#
  * RED"

ui_ACT_row_2 = "
* Blue#
* Green#
* Pass"

message_start[0] = "
* A mysterious monster appears!"

global.battle_message = message_start;
message_current = 0; //0 is the first number in our array, and the message we are currently at
message_end = 0; //Change in Step Event in case there are multiple strings used
message_draw = ""; //this is what we 'write' out. It's blank right now
increase = 0.5;
characters = 0; //how many characters have already been drawn
hold = 0; //if we hold 'Z', the text will render faster
voice = 0;
delay = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Box size and collision
global.battle_collision_x_1 = view_xview[0] + 37;
global.battle_collision_x_2 = view_yview[0] + 603;
global.battle_collision_y_1 = view_xview[0] + 255;
global.battle_collision_y_2 = view_yview[0] + 383;

global.battle_collision_x_1_draw = global.battle_collision_x_1;
global.battle_collision_x_2_draw = global.battle_collision_x_2;
global.battle_collision_y_1_draw = global.battle_collision_y_1;
global.battle_collision_y_2_draw = global.battle_collision_y_2;

global.battle_collision_x_1_lock = false;
global.battle_collision_x_2_lock = false;
global.battle_collision_y_1_lock = false;
global.battle_collision_y_2_lock = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///???????
//message_length = string_length(message[message_current]); //get the number of characters in the first message
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>battle_1</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Behaviour
//Consider using this for behaviours of enemies
if !(global.battle_message[0] == message_start[0])
{
    if (global.event_battle_enemyturn == false)
    {
        if (global.event_battle_yourturn == false)
        with (SOUL_dt)
        {
             x = -9999;
             y = -9999;
             INV_from_hit = 1;
        }
        
        if (global.option_advanced == 1)
        {
            if (keyboard_check_pressed(ord('Z')))||(keyboard_check_pressed(vk_enter))
            message_end = global.enemy_ACT.message_end_check;
        }
        else if (global.option_advanced == 2)
        {
            if (keyboard_check_pressed(ord('Z')))||(keyboard_check_pressed(vk_enter))
            {
                message_end = global.enemy_ACT.message_end_act_0;
                global.attack_by_random = false;
                global.attack_choose = 3;
            }
        }
        else if (global.option_advanced == 3)
        {
            if (keyboard_check_pressed(ord('Z')))||(keyboard_check_pressed(vk_enter))
            {
                message_end = global.enemy_ACT.message_end_act_1;
                global.attack_by_random = false;
                global.attack_choose = 4;
            }
        }
        else if (global.option_advanced == 4)
        {
            if (keyboard_check_pressed(ord('Z')))||(keyboard_check_pressed(vk_enter))
            {
                message_end = global.enemy_ACT.message_end_act_2;
                global.attack_by_random = false;
                global.attack_choose = 2;
            }
        }
        else if (global.option_advanced == 5)
        {
            if (keyboard_check_pressed(ord('Z')))||(keyboard_check_pressed(vk_enter))
            {
                message_end = global.enemy_ACT.message_end_act_3;
                global.attack_by_random = false;
                global.attack_choose = 5;
            }
        }
        else if (global.option_advanced == 6)
        {
            if (keyboard_check_pressed(ord('Z')))||(keyboard_check_pressed(vk_enter))
            {
                global.event_battle_getdialogue = false;
                
                message_end = global.enemy_ACT.message_end_act_4;
                global.enemy_1_spareable = true;
                global.attack_type[1] = atk_nothing;
                global.attack_type[2] = atk_nothing;
                global.attack_type[3] = atk_nothing;
                global.attack_type[4] = atk_nothing;
                global.attack_type[5] = atk_nothing;
                
                global.enemy_ACT.message_end_act_0 = 0;
                global.enemy_ACT.message_end_act_1 = 0;
                global.enemy_ACT.message_end_act_2 = 1;
                global.enemy_ACT.message_end_act_3 = 0;
                global.enemy_ACT.message_end_act_4 = 0;
                
global.enemy_ACT.message_act_0[0] = "
* The monster refuses to fight..."
global.enemy_ACT.message_act_1[0] = "
* The monster refuses to fight..."
global.enemy_ACT.message_act_2[0] = "
* Ironically, the monster refuses#
  to heal you as much as it#
  refuses to fight...?"
global.enemy_ACT.message_act_2[1] = "
* Wait, no.#
* You're probably just selfish.#
* (...ever heard of ITEMs?)"
global.enemy_ACT.message_act_3[0] = "
* The monster refuses to fight..."
global.enemy_ACT.message_act_4[0] = "
* ?????"
            }
        }
        
        if (keyboard_check_pressed(ord('Z'))) 
        {
            if !(global.option_advanced == 0)
            global.option_advanced_choose_last = global.option_advanced;
            global.option_advanced = 0;
        }
    }
    else
    {
        if !(instance_exists(global.attack_type[global.attack_choose]))
        {
            if (global.attack_by_random == false)
            &amp;&amp;(message_current == message_end)
            instance_create(x, y, global.attack_type[global.attack_choose]);
        }
        if (global.enemy_1_spareable == true)
message_start[0] = "
* The monster lets you go."
        else if (global.option_advanced_choose_last == 2)
message_start[0] = "
* The monster is waiting#
  patiently for your next#
  action.";
        else if (global.option_advanced_choose_last == 3)
message_start[0] = "
* The monster is waiting#
  eagerly for your next#
  action.";
        else if (global.option_advanced_choose_last == 5)
message_start[0] = "
* The monster seems to have#
  cooled down from its last#
  attack..."
        else
        message_start[0] = "
* The monster is waiting#
  for your next action.";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Info
if (global.reset_info == true)
{
    message_draw = "";
    message_current = 0;
    characters = 0;
    global.attack_choose = 0;
    global.attack_by_random = true;
    global.event_battle_enddialogue = false;
    global.reset_info = false;
}
if (global.event_battle_yourturn == true)
{
    global.battle_message[0] = message_start[0];    
}
if (global.event_battle_enemyturn == false)
&amp;&amp;!(instance_exists(obj_battle_end))
&amp;&amp;(global.battle_collision_x_1 == global.battle_collision_x_1_draw)
&amp;&amp;(global.battle_collision_x_2 == global.battle_collision_x_2_draw)
&amp;&amp;(global.battle_collision_y_1 == global.battle_collision_y_1_draw)
&amp;&amp;(global.battle_collision_y_2 == global.battle_collision_y_2_draw)
{
    message_length = string_length(global.battle_message[message_current]); //get the number of characters in the first message
    
    if (characters &lt; message_length)
    &amp;&amp;((global.option_FIGHT == 0)
    &amp;&amp;(global.option_ACT == 0)
    &amp;&amp;(global.option_ITEM == 0)
    &amp;&amp;(global.option_MERCY == 0))
    {
        hold = ((keyboard_check_pressed(ord('X')))||(keyboard_check_pressed(vk_shift)));
        if (string_char_at(global.battle_message[message_current], characters) == "#")
        characters += 1;
        if (((string_char_at(global.battle_message[message_current], characters) == ",")
        ||(string_char_at(global.battle_message[message_current], characters) == ":"))&amp;&amp;(delay == false))
        {    
            increase = increase / 8;
            delay = true;
        }
        if (((string_char_at(global.battle_message[message_current], characters - 1) == ",")
        ||(string_char_at(global.battle_message[message_current], characters - 1) == ":"))&amp;&amp;(delay == true))
        {
            increase = increase * 8;
            delay = false;
        }
        characters += increase * (1 + (9999 * hold));
        message_draw = string_copy(global.battle_message[message_current], 0, characters);
        //string_char_at(message[message_current], characters)
        voice += increase;
        if (voice &gt;= 1)
        {
            voice = 0;
            if (!(string_char_at(global.battle_message[message_current], characters) == " ")&amp;&amp;(delay == false))
            audio_play_sound(snd_voicenarrator, 0, false);
        }
    }
    
    else
    { 
        if ((keyboard_check_pressed(ord('Z')))||(keyboard_check_pressed(vk_enter)))
        {
            if (message_current &lt; message_end)
            {
                if !(increase == 0.5) increase = 0.5;
                message_current += 1;
                message_length = string_length(global.battle_message[message_current]);
                characters = 0;
                message_draw = "";
                voice = 0;
                delay = false;
            }
            else
            {
                if !(global.battle_message[0] == message_start[0])
                {
                    global.event_battle_enemyturn = true;
                    with (SOUL_dt)
                    {
                        x = 320;
                        y = 300;
                    }
                }
                if !(increase == 0.5) increase = 0.5;
                characters = 0;
                message_draw = "";
                voice = 0;
                delay = false;
            }
        }
    }
    
    if (keyboard_check_pressed(ord('X')))||(keyboard_check_pressed(vk_shift))
    if (global.event_battle_yourturn == false)
    if !((global.option_FIGHT == 0)
    &amp;&amp;(global.option_ACT == 0)
    &amp;&amp;(global.option_ITEM == 0)
    &amp;&amp;(global.option_MERCY == 0))
    {
        if !(increase == 0.5) increase = 0.5;
        characters = 0;
        message_draw = "";
        voice = 0;
        delay = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Box Behaviour
if (global.event_battle_yourturn == true)
{
    if (global.battle_collision_x_1 == global.battle_collision_x_1_draw)
    &amp;&amp;(global.battle_collision_x_2 == global.battle_collision_x_2_draw)
    &amp;&amp;(global.battle_collision_y_1 == global.battle_collision_y_1_draw)
    &amp;&amp;(global.battle_collision_y_2 == global.battle_collision_y_2_draw)
    global.event_battle_boxready = true;
    else global.event_battle_boxready = false;
    
    if !((global.battle_collision_x_1_draw == obj_omni.x + 37)
    ||(global.battle_collision_x_2_draw == obj_omni.x + 603)
    ||(global.battle_collision_x_2_draw == obj_omni.x + 255)
    ||(global.battle_collision_x_2_draw == obj_omni.x + 383))
    global.battle_collision_x_1_draw = obj_omni.x + 37;
    global.battle_collision_x_2_draw = obj_omni.x + 603;
    global.battle_collision_y_1_draw = obj_omni.y + 255;
    global.battle_collision_y_2_draw = obj_omni.y + 383;
    
    if (global.battle_collision_x_1 &gt; global.battle_collision_x_1_draw + 10)
    global.battle_collision_x_1 -= 10;
    else global.battle_collision_x_1 = global.battle_collision_x_1_draw;
    
    if (global.battle_collision_x_2 &lt; global.battle_collision_x_2_draw - 10)
    global.battle_collision_x_2 += 10;
    else global.battle_collision_x_2 = global.battle_collision_x_2_draw;
    
    if (global.battle_collision_y_1 &lt; global.battle_collision_y_1_draw - 10)
    global.battle_collision_y_1 += 10;
    else global.battle_collision_y_1 = global.battle_collision_y_1_draw;
    
    if (global.battle_collision_y_2 &lt; global.battle_collision_y_2_draw - 10)
    global.battle_collision_y_2 += 10;
    else global.battle_collision_y_2 = global.battle_collision_y_2_draw;
}
else 
{
    global.event_battle_boxready = false;
    
    if ((instance_exists(obj_fightbar))
    &amp;&amp;(obj_fightbar.image_alpha &lt;= 0.85))
    ||!((global.event_battle_enemydialogue == true)
    ||(instance_exists(obj_fightbar))
    ||(instance_exists(interact_itemconsume))
    ||(instance_exists(interact_itemmisc)))
    {
        if (global.battle_collision_x_1 &lt; global.battle_collision_x_1_draw - 10)
        global.battle_collision_x_1 += 10;
        else global.battle_collision_x_1 = global.battle_collision_x_1_draw;
        
        if (global.battle_collision_x_2 &gt; global.battle_collision_x_2_draw + 10)
        global.battle_collision_x_2 -= 10;
        else global.battle_collision_x_2 = global.battle_collision_x_2_draw;
        
        if ((global.battle_collision_x_1_draw - global.battle_collision_x_1)
        - (global.battle_collision_y_1 - global.battle_collision_y_1_draw) &lt;= 10)
        &amp;&amp;((global.battle_collision_x_1_draw - global.battle_collision_x_1)
        - (global.battle_collision_y_1 - global.battle_collision_y_1_draw) &gt;= -10)
        {
            if (global.battle_collision_y_1 &gt; global.battle_collision_y_1_draw + 10)
            global.battle_collision_y_1 -= 10;
            else global.battle_collision_y_1 = global.battle_collision_y_1_draw;
        }
        
        if (global.battle_collision_y_2 &gt; global.battle_collision_y_2_draw + 10)
        global.battle_collision_y_2 -= 10;
        else global.battle_collision_y_2 = global.battle_collision_y_2_draw;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Behaviour
if (instance_exists(global.enemy_1)) global.enemy_1.x = global.enemy_1_position_x;

if !(instance_exists(obj_battle_end))
{
    if (global.event_battle_getdialogue == true)
    &amp;&amp;(global.event_battle_enddialogue == false)
    &amp;&amp;(global.event_battle_enemyturn == true)
    &amp;&amp;(instance_number(obj_log_pre) + instance_number(obj_log) &lt; global.enemy_count)
    
    if ((instance_exists(obj_fightbar))
    &amp;&amp;(obj_fightbar.fade == true))
    ||!((instance_exists(obj_fightbar))
    ||(instance_exists(interact_itemconsume))
    ||(instance_exists(interact_itemmisc)))
    {
        with instance_create
        (
            global.enemy_1_position_x + global.enemy_1.sprite_width/2,
            global.enemy_1_position_y,
            obj_log_pre
        )
        {
            for (i = 0; i &lt;= global.enemy_1.message_end_log; i++)
            message[i] = global.enemy_1.log[i];
            
            message_end = global.enemy_1.message_end_log;
        }
        if (global.enemy_count &gt; 1)
        {
            with instance_create
            (
                global.enemy_2_position_x + global.enemy_2.sprite_width/2,
                global.enemy_2_position_y,
                obj_log_pre
            )
            {
                for (i = 0; i &lt;= global.enemy_2.message_end_log; i++)
                message[i] = global.enemy_2.log[i];
                
                message_end = global.enemy_2.message_end_log;
            }
        }
        if (global.enemy_count &gt; 2)
        {
            with instance_create
            (
                global.enemy_3_position_x + global.enemy_3.sprite_width/2,
                global.enemy_3_position_y,
                obj_log_pre
            )
            {
                for (i = 0; i &lt;= global.enemy_3.message_end_log; i++)
                message[i] = global.enemy_3.log[i];
                
                message_end = global.enemy_3.message_end_log;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Textbox draw
draw_set_color(c_white);
draw_text(100, 120, string((global.battle_collision_x_1_draw - global.battle_collision_x_1)
    - (global.battle_collision_y_1 - global.battle_collision_y_1_draw)));
//draw_text(100, 150, global.enemy_1_position_y);
//draw_text(100, 200, global.option_advanced);
draw_rectangle(global.battle_collision_x_1 - 5, global.battle_collision_y_1 - 5, global.battle_collision_x_2 + 5, global.battle_collision_y_2 + 5, false);
draw_set_color(c_black);
draw_rectangle(global.battle_collision_x_1, global.battle_collision_y_1, global.battle_collision_x_2, global.battle_collision_y_2, false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Behavior show
draw_set_font(dt_mono);
draw_set_color(c_white);
if !(instance_exists(obj_battle_end))
{
    if ((global.event_battle_enemyturn == false)
    &amp;&amp;(global.reset_info == false))
    {
        if (global.battle_message[0] == message_start[0])
        {
            if (global.option_FIGHT == 0)
            &amp;&amp;(global.option_ACT == 0)
            &amp;&amp;(global.option_ITEM == 0)
            &amp;&amp;(global.option_MERCY == 0)
            draw_text_ext(view_xview[0] + 65, view_yview[0] + 250, message_draw, 17.5, 9999);
        }
        else draw_text_ext(view_xview[0] + 65, view_yview[0] + 250, message_draw, 17.5, 9999);
    }
    
    if (!(global.option_FIGHT == 0)
    ||!(global.option_ACT == 0))
    &amp;&amp;(global.option_advanced == 0)
    {
        draw_text_ext(view_xview[0] + 65, view_yview[0] + 250, ui_target_enemy, 17.5, 9999);
        if (global.enemy_1_spareable == true)
        {
            draw_set_color(c_yellow);
            draw_text_ext(view_xview[0] + 65, view_yview[0] + 250, "#  * " + string(global.enemy_1.name), 17.5, 9999);
        }
    }
    
    if !(global.option_FIGHT == 0)
    {
        draw_set_color(c_red);
        draw_rectangle(view_xview[0] + 300, view_yview[0] + 275, view_xview[0] + 400, view_yview[0] + 290, false)
        draw_set_color(c_lime);
        if (global.enemy_1.HP &gt; 0) draw_rectangle(view_xview[0] + 300, view_yview[0] + 275, view_xview[0] + 300 + 100 * (global.enemy_1.HP/global.enemy_1.max_HP), view_yview[0] + 290, false);
    }
    
    if !(global.option_advanced == 0)
    &amp;&amp;(global.event_battle_yourturn == true)
    {
        draw_set_color(c_white);
        draw_text_ext(view_xview[0] + 65, view_yview[0] + 250, ui_ACT_row_1, 17.5, 9999);
        draw_text_ext(view_xview[0] + 343, view_yview[0] + 250, ui_ACT_row_2, 17.5, 9999);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
