<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_SOUL_dt</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats and item list
LV = 10;
EXP = 0;
max_HP = 100;
HP = max_HP;
DP = 0;
ATK = 10;
DEF = 5;
INV = 0;
INV_from_hit = 0;
gold = 573;

SPEED_boost = false;

start_turn = false;
regen_num = 0;
regen_chance = 0;
fixed = true;
jumped = false;
SOUL_state = "normal";
step_from_break = 60;
gforce = 0;

move_x = false;
move_y = false;

weapon = "Worn Dagger";
armor = "Heart Locket";
weapon_ATK = 15;
armor_DEF = 15;

name = "Durango";
item[1] = "Butterscotch Pie";
item[2] = "Butterscotch Pie";
item[3] = "Butterscotch Pie";
item[4] = "Butterscotch Pie";
item[5] = "Butterscotch Pie";
item[6] = "Butterscotch Pie";
item[7] = "Butterscotch Pie";
item[8] = "Butterscotch Pie";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cell list
cell_1 = "Toriel's Phone";
cell_2 = "Papyrus and Undyne";
cell_3 = "Dimensional Box A";
cell_4 = "Dimensional Box B";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Misc
ui_menu_option_save = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If HP is 0 or less
if (HP &lt;= 0)
{
    if (SOUL_dt.step_from_break == 60)
    {
        audio_stop_all();
        instance_destroy(all);
        instance_create(x, y, obj_omni);
        instance_create(x, y, SOUL_dt);
        SOUL_dt.HP = 0;
        room_goto(room_gameover);
    }
    SOUL_dt.step_from_break -= 1;
    if (step_from_break &lt;= 0)
    {
        instance_create(x, y, SOUL_dt_broken);
        instance_destroy();
    }
    global.name = name;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Passive mode
if (fixed == true)&amp;&amp;!(room == room_gameover)
{
    image_alpha = 0.01;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Battle mode
if (instance_exists(obj_battle_start))
{
    if ((obj_battle_start.step &gt; 30)&amp;&amp;(obj_battle_start.step &lt; 34))
    ||((obj_battle_start.step &gt; 38)&amp;&amp;(obj_battle_start.step &lt; 42))
    ||(obj_battle_start.step &gt; 46)
    image_alpha = 1;
    else image_alpha = 0.01;
}
if (instance_exists(battle_omni))
{
    image_alpha = 1;
    
    if (global.reset_info == true)
    &amp;&amp;(global.HP_beyond_max == false)
    &amp;&amp;!(keyboard_check(ord('X')))
    start_turn = true;
    
    //Navigate in player turn
    if (global.event_battle_yourturn == true)
    &amp;&amp;(global.event_battle_flee == false)
    &amp;&amp;(global.event_battle_boxready == true)
    {
        if (start_turn == true)
        {
            regen_num = random_range(0, 1);
            if (regen_num &lt;= regen_chance)
            {
                audio_play_sound(snd_menuconfirm1, 0, false);
                HP += 1;
            }
            start_turn = false;
        }
        
        if (global.option_FIGHT == 0)
        &amp;&amp;(global.option_ACT == 0)
        &amp;&amp;(global.option_ITEM == 0)
        &amp;&amp;(global.option_MERCY == 0)
        {
            y = 452;
            if (global.option_battle == 1) x = 48;
            if (global.option_battle == 2) x = 204;
            if (global.option_battle == 3) x = 360;
            if (global.option_battle == 4) x = 516;
        }
        else
        {
            if !(global.option_FIGHT == 0)
            {
                x = 74;
                if (global.option_FIGHT == 1) y = 285;
                if (global.option_FIGHT == 2) y = 321;
                if (global.option_FIGHT == 3) y = 357;
            }
            if !(global.option_ACT == 0)
            {
                if !(global.option_advanced == 0)
                {
                    if (global.option_advanced mod 2 == 0) x = 320;
                    else x = 74;
                    if (global.option_advanced &lt;= 2) y = 285;
                    else if (global.option_advanced &lt;= 4) y = 321;
                    else if (global.option_advanced &lt;= 6) y = 357;
                }
                else
                {
                    x = 74;
                    if (global.option_ACT == 1) y = 285;
                    if (global.option_ACT == 2) y = 321;
                    if (global.option_ACT == 3) y = 357;
                }
            }
            if !(global.option_ITEM == 0)
            {
                x = 74;
                if (global.option_ITEM == 2)
                ||(global.option_ITEM == 4)
                ||(global.option_ITEM == 6)
                ||(global.option_ITEM == 8)
                x = 320;
                
                y = 285;
                if (global.option_ITEM == 3)
                ||(global.option_ITEM == 4)
                ||(global.option_ITEM == 7)
                ||(global.option_ITEM == 8)
                y = 321;
            }
            if !(global.option_MERCY == 0)
            {
                x = 74;
                if (global.option_MERCY == 1) y = 285;
                if (global.option_MERCY == 2) y = 321;
            }
        }
    }
    else
    {
        if (SOUL_state == "defender")
        &amp;&amp;!(instance_exists(obj_SOULshield))
        instance_create(x, y, obj_SOULshield);
    }
    
    
    //Navigate in enemy turn
    if (global.event_battle_enemyturn == true)
    &amp;&amp;!((instance_exists(obj_log))
    ||(instance_exists(obj_log_pre)))
    {
        if (SOUL_state == "normal")||(SOUL_state == "shooter")
        {
            if (SOUL_state == "shooter")
            {
                if (keyboard_check_pressed(ord('Z')))
                ||(keyboard_check_pressed(vk_enter))
                {
                    if !((global.event_battle_enemydialogue == true)
                    ||(instance_exists(obj_fightbar))
                    ||(instance_exists(interact_itemconsume))
                    ||(instance_exists(interact_itemmisc))
                    ||(instance_exists(obj_bullet_jt)))
                    instance_create(x, y - 5, obj_bullet_jt);
                }
            }
            
            if (x &gt; (global.battle_collision_x_1 + 8))
            x -= keyboard_check(vk_left) * (2 + SPEED_boost - (1 * ((keyboard_check(ord('X')))||(keyboard_check(vk_shift)))));
            else x = global.battle_collision_x_1 + 8;
            if (x &lt; (global.battle_collision_x_2 - 7))
            x += keyboard_check(vk_right) * (2 + SPEED_boost - (1 * ((keyboard_check(ord('X')))||(keyboard_check(vk_shift)))));
            else x = global.battle_collision_x_2 - 7;
            if (y &gt; (global.battle_collision_y_1 + 8))
            y -= keyboard_check(vk_up) * (2 + SPEED_boost - (1 * ((keyboard_check(ord('X')))||(keyboard_check(vk_shift)))));
            else y = global.battle_collision_y_1 + 8;
            if (y &lt; (global.battle_collision_y_2 - 7))
            y += keyboard_check(vk_down) * (2 + SPEED_boost - (1 * ((keyboard_check(ord('X')))||(keyboard_check(vk_shift)))));
            else y = global.battle_collision_y_2 - 7;
            
            if (!((keyboard_check(vk_left))&amp;&amp;(keyboard_check(vk_right)))
            &amp;&amp;((keyboard_check(vk_left))||(keyboard_check(vk_right))))
            &amp;&amp;!((x == global.battle_collision_x_1 + 8)
            ||(x == global.battle_collision_x_2 - 7))
            move_x = true;
            else move_x = false;
            
            if !((keyboard_check(vk_up))&amp;&amp;(keyboard_check(vk_down)))
            &amp;&amp;((keyboard_check(vk_up))||(keyboard_check(vk_down)))
            &amp;&amp;!((y = global.battle_collision_y_1 + 8)
            ||(y = global.battle_collision_y_2 - 7))
            move_y = true;
            else move_y = false;
        }
        if !(SOUL_state == "defender") instance_destroy(obj_SOULshield);
        
        if (SOUL_state == "mew mew")
        {
        }
        if (SOUL_state == "gravity")
        {
            if (x &gt; (global.battle_collision_x_1 + 8))
            x -= keyboard_check(vk_left) * (2 + SPEED_boost - (1 * ((keyboard_check(ord('X')))||(keyboard_check(vk_shift)))));
            else x = global.battle_collision_x_1 + 8;
            if (x &lt; (global.battle_collision_x_2 - 7))
            x += keyboard_check(vk_right) * (2 + SPEED_boost - (1 * ((keyboard_check(ord('X')))||(keyboard_check(vk_shift)))));
            else x = global.battle_collision_x_2 - 7;
            
            if (jumped == true)
            ||(keyboard_check(vk_up))
            move_y = true;
            else move_y = false;
            
            if (!((keyboard_check(vk_left))&amp;&amp;(keyboard_check(vk_right)))
            &amp;&amp;((keyboard_check(vk_left))||(keyboard_check(vk_right))))
            &amp;&amp;!((x == global.battle_collision_x_1 + 8)
            ||(x == global.battle_collision_x_2 - 7))
            move_x = true;
            else move_x = false;
            
            if (y &lt;= global.battle_collision_y_2 - 7)
            {
                if (keyboard_check(vk_up))&amp;&amp;(jumped == false)
                y -= keyboard_check(vk_up) * 3 - gforce;
                else y += gforce;
                gforce += 0.075;
            }
            if (keyboard_check_released(vk_up))&amp;&amp;(jumped == false)
            {
                if (gforce &gt; 3)
                {
                    gforce -= 3;
                    y -= 2;
                }
                else gforce = 0;
                jumped = true;
            }
            
            if (y &gt;= global.battle_collision_y_2 - 7)
            {
                gforce = 0;
                jumped = false;
                y = global.battle_collision_y_2 - 7;
            }
        }
    }
    
    //Invincibility
    if !(INV_from_hit == 0)
    {
        if (INV_applied == false)
        {
            INV_from_hit += INV;
            INV_applied = true;
        }
        if (SOUL_state == "normal") sprite_index = spr_SOUL_dt_hit;
        if (SOUL_state == "gravity") sprite_index = spr_SOUL_nt_hit;
        if (SOUL_state == "shooter") sprite_index = spr_SOUL_jt_hit;
        if (SOUL_state == "defender") sprite_index = spr_SOUL_kd_hit;
        image_speed = 0.2;
        step += 1;
        if (step &gt;= 10) 
        {
            INV_from_hit -= 1;
            step = 0;
        }
    }
    else
    {
        step = 0;
        INV_applied = false;
        if !(sprite_index == spr_SOUL_dt_flee) 
        {
            if (SOUL_state == "normal") sprite_index = spr_SOUL_dt;
            if (SOUL_state == "gravity") sprite_index = spr_SOUL_nt;
            if (SOUL_state == "shooter") sprite_index = spr_SOUL_jt;
            if (SOUL_state == "defender") sprite_index = spr_SOUL_kd;
        }
    }
    
    //Flee from battle
    if (global.event_battle_flee == true)
    {
        x -= 2;
        sprite_index = spr_SOUL_dt_flee;
        image_speed = 0.2;
        if (x == 0) instance_create(x, y, obj_fadeout_endbattle);
    }
}
else SPEED_boost = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LOVE Stats
//Stats depending on LV
if (EXP &lt; 10) {LV = 1; max_HP = 20; ATK = 10; DEF = 0;}
if (EXP &gt;= 10) {LV = 2; max_HP = 24; ATK = 12;}
if (EXP &gt;= 30) {LV = 3; max_HP = 28; ATK = 14;}
if (EXP &gt;= 70) {LV = 4; max_HP = 32; ATK = 16;}
if (EXP &gt;= 120) {LV = 5; max_HP = 36; ATK = 18; DEF = 1;}
if (EXP &gt;= 200) {LV = 6; max_HP = 40; ATK = 20;}
if (EXP &gt;= 300) {LV = 7; max_HP = 44; ATK = 22;}
if (EXP &gt;= 500) {LV = 8; max_HP = 48; ATK = 24;}
if (EXP &gt;= 800) {LV = 9; max_HP = 52; ATK = 26; DEF = 2;}
if (EXP &gt;= 1200) {LV = 10; max_HP = 56; ATK = 28;}
if (EXP &gt;= 1700) {LV = 11; max_HP = 60; ATK = 30;}
if (EXP &gt;= 2500) {LV = 12; max_HP = 64; ATK = 32;}
if (EXP &gt;= 3500) {LV = 13; max_HP = 68; ATK = 34; DEF = 3;}
if (EXP &gt;= 5000) {LV = 14; max_HP = 72; ATK = 36;}
if (EXP &gt;= 7000) {LV = 15; max_HP = 76; ATK = 38;}
if (EXP &gt;= 10000) {LV = 16; max_HP = 80; ATK = 40;}
if (EXP &gt;= 15000) {LV = 17; max_HP = 84; ATK = 42;DEF = 4;}
if (EXP &gt;= 25000) {LV = 18; max_HP = 88; ATK = 44;}
if (EXP &gt;= 50000) {LV = 19; max_HP = 92; ATK = 46;}
if (EXP &gt;= 99999) {LV = 20; max_HP = 99; ATK = 48;}

//EXP required for next level
if (LV == 1) req_next_level = 10 - EXP;
if (LV == 2) req_next_level = 30 - EXP;
if (LV == 3) req_next_level = 70 - EXP;
if (LV == 4) req_next_level = 120 - EXP;
if (LV == 5) req_next_level = 200 - EXP;
if (LV == 6) req_next_level = 300 - EXP;
if (LV == 7) req_next_level = 500 - EXP;
if (LV == 8) req_next_level = 800 - EXP;
if (LV == 9) req_next_level = 1200 - EXP;
if (LV == 10) req_next_level = 1700 - EXP;
if (LV == 11) req_next_level = 2500 - EXP;
if (LV == 12) req_next_level = 3500 - EXP;
if (LV == 13) req_next_level = 5000 - EXP;
if (LV == 14) req_next_level = 7000 - EXP;
if (LV == 15) req_next_level = 10000 - EXP;
if (LV == 16) req_next_level = 15000 - EXP;
if (LV == 17) req_next_level = 25000 - EXP;
if (LV == 18) req_next_level = 50000 - EXP;
if (LV == 19) req_next_level = 99999 - EXP;
if (LV == 20) req_next_level = "-----";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP Update
if (HP &gt; max_HP)
{
    if (global.HP_beyond_max == false) HP = max_HP;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item Update
item_list =
item[1] + "#"
+ item[2] + "#"
+ item[3] + "#"
+ item[4] + "#"
+ item[5] + "#"
+ item[6] + "#"
+ item[7] + "#"
+ item[8]
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon stats
if (weapon == "Determination.") weapon_ATK = round(DP/2);

if (weapon == "Toy Knife") weapon_ATK = 3;
if (weapon == "Tough Glove") weapon_ATK = 5;
if (weapon == "Ballet Shoes") weapon_ATK = 7;
if (weapon == "Torn Notebook") weapon_ATK = 2;
if (weapon == "Burnt Pan") weapon_ATK = 10;
if (weapon == "Empty Gun") weapon_ATK = 10;

if (weapon == "Worn Dagger") weapon_ATK = 15;
if (weapon == "Encyclopedia") weapon_ATK = 4;
if (weapon == "Knuckles") weapon_ATK = 6;
if (weapon == "Wooden Bat") weapon_ATK = 8;
if (weapon == "Pocket Knife") weapon_ATK = 12;
if (weapon == "Hockey Stick") weapon_ATK = 15;
if (weapon == "Metal Bat") weapon_ATK = 17;
if (weapon == "Shiny Pan") weapon_ATK = 20;

//??????
if (weapon == "Edax Animae") weapon_ATK = 45;
if (weapon == "LEGO BRICK") weapon_ATK = 99;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Armor Stats
if (armor == "Determination.") 
{armor_DEF = round(DP/2); regen_chance = 1;}
if (armor == "Heart Locket")
{armor_DEF = 15; regen_chance = 0;}
if (armor == "temy armor")
{armor_DEF = 20; regen_chance = 0.5;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item Removal Control
if (item[1] == "")
{
    item[1] = item[2];
    item[2] = item[3];
    item[3] = item[4];
    item[4] = item[5];
    item[5] = item[6];
    item[6] = item[7];
    item[7] = item[8];
    item[8] = "";
}
if (item[2] == "")
{
    item[2] = item[3];
    item[3] = item[4];
    item[4] = item[5];
    item[5] = item[6];
    item[6] = item[7];
    item[7] = item[8];
    item[8] = "";
}
if (item[3] == "")
{
    item[3] = item[4];
    item[4] = item[5];
    item[5] = item[6];
    item[6] = item[7];
    item[7] = item[8];
    item[8] = "";
}
if (item[4] == "")
{
    item[4] = item[5];
    item[5] = item[6];
    item[6] = item[7];
    item[7] = item[8];
    item[8] = "";
}
if (item[5] == "")
{
    item[5] = item[6];
    item[6] = item[7];
    item[7] = item[8];
    item[8] = "";
}
if (item[6] == "")
{
    item[6] = item[7];
    item[7] = item[8];
    item[8] = "";
}
if (item[7] == "") 
{
    item[7] = item[8];
    item[8] = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(battle_omni))
draw_sprite_ext(sprite_index, image_index, view_xview[0] + x, view_yview[0] + y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
else draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
