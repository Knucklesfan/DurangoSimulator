<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = sprite_log;

dir = 0;
message_current = 0; //0 is the first number in our array, and the message we are currently at
//message_end = /1; //6 is the last number in our array
message_draw = ""; //this is what we 'write' out. It's blank right now
increase = 0.5;
characters = 0; //how many characters have already been drawn
hold = 0; //if we hold 'Z', the text will render faster
voice = 0;
delay = false;

message_length = string_length(message[message_current]); //get the number of characters in the first message
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (characters &lt; message_length)
{
    hold = ((keyboard_check(ord('X')))||(keyboard_check(vk_shift)));
    if (string_char_at(message[message_current], characters) == "#")
    characters += 1;
    if (((string_char_at(message[message_current], characters) == ",")
    ||(string_char_at(message[message_current], characters) == ":"))&amp;&amp;(delay == false))
    {    
        increase = increase / 8;
        delay = true;
    }
    if (((string_char_at(message[message_current], characters - 1) == ",")
    ||(string_char_at(message[message_current], characters - 1) == ":"))&amp;&amp;(delay == true))
    {
        increase = increase * 8;
        delay = false;
    }
    
    draw_textbox_set();
    
    characters += increase * (1 + (9999 * hold));
    message_draw = string_copy(message[message_current], 0, characters);
    //string_char_at(message[message_current], characters)
    voice += increase;
    if (voice &gt;= 1)
    {
        voice = 0;
        if (!(string_char_at(message[message_current], characters) == " ")&amp;&amp;(delay == false))
        audio_play_sound(snd_voice, 0, false);
    }
}

else
{ 
    if ((keyboard_check_pressed(ord('Z')))||(keyboard_check_pressed(vk_enter)))
    {
        if (message_current &lt; message_end)
        {
            if !(increase == 0.5) increase = 0.5;
            message_current += 1;
            message_length = string_length(message[message_current]);
            characters = 0;
            message_draw = "";
            voice = 0;
            delay = false;
        }
        else
        {
            instance_destroy();
            global.event_battle_enddialogue = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_color(c_black);
draw_set_font(fnt_dotumche);
draw_log(message_draw, sprite_index, 0, 0);
//if (sprite_index == spr_log_r_s) draw_text(x + 40, y - 25, message_draw);
//draw_text(500, 320, global.enemy_count);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
