<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
fade = false;
fade_x = 0;
fade_y = 0;

green = false;
blue = false;
orange = false;
range_1 = 0;
range_2 = 0;

shake = false;
shake_xtr = false;
shake_num = 0;
shake_time = 0;

inv = 0;
inv_dependent = true;
draw_until_box_x_1 = true;
draw_until_box_x_2 = true;
draw_until_box_y_1 = false;
draw_until_box_y_2 = true;
self_destruct_yourturn = true;
self_destruct_contact = true;
self_destruct_room_limits = true;
self_destruct_box_x_1 = true;
self_destruct_box_x_2 = true;
self_destruct_box_y_1 = true;
self_destruct_box_y_2 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Behaviour
if (fade == false)
{
    if (self_destruct_yourturn == true)
    if (global.event_battle_yourturn == true)
    instance_destroy();
    
    if (self_destruct_box_x_1 == true)
    if (x &lt; global.battle_collision_x_1 - (sprite_width / 2))
    instance_destroy();
    
    if (self_destruct_box_x_2 == true)
    if (x &gt; global.battle_collision_x_2 + (sprite_width / 2))
    instance_destroy();
    
    if (self_destruct_box_y_1 == true)
    if (y &lt; global.battle_collision_y_1 - (sprite_height / 2))
    instance_destroy();
    
    if (self_destruct_box_y_2 == true)
    if (y &gt; global.battle_collision_y_2 + (sprite_height / 2))
    instance_destroy();
    
    if (place_meeting(x, y, obj_bullet_jt))
    {
        audio_play_sound(snd_yellowbullethit, 0, false)
        instance_destroy(instance_nearest(x, y, obj_bullet_jt));
        
        if (global.shake == true)
        with (obj_shake)
        {
            window_set_position(window_x, window_y);
            
            view_xview[0] = view_xview_start;
            view_yview[0] = view_yview_start;
            background_x[0] = background_x_start;
            background_y[0] = background_y_start;
        }
        
        global.step_shake = 0;
        global.shake = shake;
        global.shake_xtr = shake_xtr;
        global.shake_num = shake_num / 2;
        global.shake_time = shake_time;
        fade = true;
    }
    
    if (green == true) image_blend = make_color_rgb(0, 255, 0);
    if (blue == true) image_blend = make_color_rgb(0, 165, 255);
    if (orange == true) image_blend = make_color_rgb(255, 165, 0);
    if (blue == true)&amp;&amp;(orange == true) image_blend = make_color_rgb(255, 255, 255);
    if !(green == true)&amp;&amp;(inv == 0) image_blend = make_color_rgb(128, 0, 255);
    if (shake_xtr == true) image_blend = make_color_rgb(255, 0, 0);
    
    if (place_meeting(x, y, SOUL_dt))//&amp;&amp;(object_get_name(self) == "bullet_omni")
    if (SOUL_dt.INV_from_hit == 0)||(inv_dependent == false)
    {
        if (green == true)
        {
            if (global.HP_beyond_max == false) SOUL_dt.HP += range_1;
        }
        if (blue == true)
        {
            if (SOUL_dt.move_x == true)
            ||(SOUL_dt.move_y == true)
            SOUL_dt.HP -= irandom_range(range_1, range_2);
        }
        if (orange == true)
        {
            if (SOUL_dt.move_x == false)
            &amp;&amp;(SOUL_dt.move_y == false)
            SOUL_dt.HP -= irandom_range(range_1, range_2);
        }
        
        if (SOUL_dt.HP &lt; 0) SOUL_dt.HP = 0;
        
        if (SOUL_dt.HP &gt; SOUL_dt.max_HP) 
        &amp;&amp;(global.HP_beyond_max == false)
        SOUL_dt.HP = SOUL_dt.max_HP;
        
        if ((blue == true)&amp;&amp;((SOUL_dt.move_x == true)||(SOUL_dt.move_y == true)))
        ||((orange == true)&amp;&amp;((SOUL_dt.move_x == false)&amp;&amp;(SOUL_dt.move_y == false)))
        ||(green == true)
        {
            if (shake == true)
            {
                global.shake = true;
                global.step_shake = 0;
            }
            if (shake_xtr == true)
            if (SOUL_dt.HP &gt; 0) global.shake_xtr = true;
            
            if (green == true) audio_play_sound(snd_SOULheal, 0, false);
            if (blue == true)||(orange == true)
            audio_play_sound(snd_SOULhit, 0, false);
            if (shake_xtr == true)
            {
                audio_stop_sound(snd_SOULhit);
                audio_play_sound(snd_SOULhit_xtr, 0, false);
            }
            if (SOUL_dt.INV_from_hit == 0)
            {
                global.shake_num = shake_num;
                global.shake_time = shake_time;
                if (green == false) SOUL_dt.INV_from_hit = inv + ((SOUL_dt.weapon = "Torn Notebook") * 6);
            }
            if (self_destruct_contact == true) instance_destroy();
        }
    }
    
    if (self_destruct_room_limits = true)
    {
        if (x &gt;= room_width)||(y &gt;= room_height)
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (draw_until_box_x_1 == false)
&amp;&amp;(draw_until_box_x_2 == false)
draw_self();

if (fade == false)
{
    if (draw_until_box_x_1 == true)
    &amp;&amp;(x &lt;= global.battle_collision_x_1 + sprite_width / 2)
    {
        if (draw_until_box_x_2 == true)
        draw_sprite_part_ext
        (
            sprite_index,
            image_index,
            global.battle_collision_x_1 - bbox_left,
            0,
            global.battle_collision_x_2 - bbox_left,
            global.battle_collision_y_2 - bbox_top,
            view_xview[0] + global.battle_collision_x_1,
            view_yview[0] + y - sprite_width / 2,
            1,
            1,
            image_blend,
            image_alpha
        );
        
        if (draw_until_box_x_2 == false)
        draw_sprite_part_ext
        (
            sprite_index,
            image_index,
            global.battle_collision_x_1 - bbox_left,
            0,
            sprite_width,
            sprite_height,
            view_xview[0] + global.battle_collision_x_1,
            view_yview[0] + bbox_top,
            1,
            1,
            image_blend,
            image_alpha
        );
    }
    
    if (draw_until_box_x_2 == true)
    &amp;&amp;(bbox_left &gt; global.battle_collision_x_1)
    draw_sprite_part_ext
    (
        sprite_index,
        image_index,
        0,
        0,
        global.battle_collision_x_2 - bbox_left,
        global.battle_collision_y_2 - bbox_top,
        view_xview[0] + x - sprite_width / 2,
        view_yview[0] + y - sprite_width / 2,
        1,
        1,
        image_blend,
        image_alpha
    );
}
else
{
    fade_x += 0.05;
    fade_y += 0.05;
    image_alpha -= 0.05;
    draw_sprite_ext(sprite_index, 0, x, y, 1 + fade_x, 1 + fade_y, 0, image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
